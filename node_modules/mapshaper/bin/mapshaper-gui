#!/usr/bin/env node

var http = require("http"),
    path = require("path"),
    url = require("url"),
    fs = require("fs"),
    open = require("open"),
    optimist = require("optimist"),
    defaultPort = 5555,
    webRoot = path.join(__dirname, "../www"),
    opts = optimist.usage("Usage: $ mapshaper-gui [options] [file ...]")
      .options("h", {
        alias: "help",
        describe: "show this help message",
        'boolean': true
      })
      .options("p", {
        alias: "port",
        default: defaultPort,
        describe: "http port of server on localhost"
      })
      .check(function(argv) {
        if (argv.h) {
          optimist.showHelp();
          process.exit(0);
        }
      }).argv,
    port = parseInt(opts.port, 10) || defaultPort,
    probeCount = 0,
    dataFiles = expandShapefiles(opts._);

validateFiles(dataFiles);

process.on('uncaughtException', function(err) {
  if (err.errno === 'EADDRINUSE') {
    // probe for an open port, unless user has specified a non-default port
    if (port == defaultPort && probeCount < 10) {
      probeCount++;
      startServer(port + probeCount);
      return;
    }
    console.error("Port " + port + ' is in use (Run mapshaper-gui -h for help).');
  } else {
    console.error(err);
  }
  process.exit(1);
});

startServer(port);

function startServer(port) {
  var dataPath = '/data/';
  var timeout;

  http.createServer(function(request, response) {
    var uri = url.parse(request.url).pathname;
    clearTimeout(timeout);
    if (uri == '/close') {
      // end process when page closes, unless page is immediately refreshed
      timeout = setTimeout(function() {
        process.exit(0);
      }, 200);
    } else if (uri == "/manifest.js") {
      // serve JS file containing manifest of files for mapshaper to load
      serveContent(getManifestJS(dataFiles), response, getMimeType(uri));
    } else if (uri.indexOf(dataPath) === 0) {
      // serve a file from a path relative to this script
      // assumed to be a data file from the cmd line (!)
      serveFile(decodeURI(uri).replace(dataPath, ''), response);
    } else {
      // serve a file from the web root
      if (uri == '/') {
        uri = '/index.html';
      }
      serveFile(path.join(webRoot, uri), response);
    }
  }).listen(port, function() {
    open("http://localhost:" + port);
  });
}

function serveFile(filename, response) {
  fs.readFile(filename, function(err, content) {
    if (err) {
      response.writeHead(404, {"Content-Type": "text/plain"});
      response.write("404 Not Found\n");
      response.end();
    } else {
      serveContent(content, response, getMimeType(filename));
    }
  });
}

function serveContent(content, response, mimeType) {
  if (mimeType) {
    response.setHeader("Content-Type", mimeType);
  }
  response.writeHead(200);
  response.write(content, "binary");
  response.end();
}

function getManifestJS(files) {
  var manifest = {
    files: files
  };
  if (files.length > 0) {
    return "mapshaper.manifest = " + JSON.stringify(manifest) + ";\n";
  }
  return '';
}

// print an error and exit if a file is unreadable
function validateFiles(files) {
  files.forEach(function(f) {
    var stat, msg;
    if (isUrl(f)) return;
    try {
      stat = fs.statSync(f);
      if (!stat.isFile()) {
        msg = 'Not a readable file';
      }
    } catch(e) {
      msg = 'File not found';
    }
    if (msg) {
      console.error(msg + ":", f);
      process.exit(1);
    }
  });
}

// pull in auxiliary files along with .shp, if they exist
function expandShapefiles(files) {
  var shps = files.filter(function(f) {return extname(f).toLowerCase() == 'shp';});
  shps.forEach(function(f) {
    if (isUrl(f)) return; // TODO: try to load aux files from URLs
    addAuxFile(files, f, '.dbf');
    addAuxFile(files, f, '.prj');
    addAuxFile(files, f, '.cpg');
  });
  return files;
}

function getMimeType(filename) {
  return {
    css: 'text/css',
    js: 'application/javascript',
    html: 'text/html',
    png: 'image/png'
  }[extname(filename)] || null;
}

function extname(filename) {
  return path.extname(filename).replace('.', '');
}

function isUrl(name) {
  return /:\/\//.test(name);
}

function containsStringCI(arr, str) {
  str = str.toLowerCase();
  for (var i=0; i<arr.length; i++) {
    if (arr[i].toLowerCase() == str) return true;
  }
  return false;
}

// append auxiliary file, if it exists in the filesystem but not in the file list
function addAuxFile(files, file, ext) {
  var extRx = /\.[^.]+$/;
  // handle UC and LC extensions
  // TODO: match any combination of UC and LC characters in filename
  var aux = file.replace(extRx, ext.toLowerCase());
  var AUX = file.replace(extRx, ext.toUpperCase());
  if (!containsStringCI(files, aux)) {
    if (fs.existsSync(aux)) {
      files.push(aux);
    } else if (fs.existsSync(AUX)) {
      files.push(AUX);
    }
  }
}
